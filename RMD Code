---
title: "Parker_MACHINE_LEARNING_PROJECT"
author: "Parker"
date: "February 8, 2018"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```



## Background

Using devices such as Jawbone Up, Nike FuelBand, and Fitbit it is now possible to collect a large amount of data about personal activity relatively inexpensively. These type of devices are part of the quantified self movement - a group of enthusiasts who take measurements about themselves regularly to improve their health, to find patterns in their behavior, or because they are tech geeks. One thing that people regularly do is quantify how much of a particular activity they do, but they rarely quantify how well they do it. In this project, your goal will be to use data from accelerometers on the belt, forearm, arm, and dumbell of 6 participants. They were asked to perform barbell lifts correctly and incorrectly in 5 different ways. More information is available from the website here: <http://web.archive.org/web/20161224072740/http:/groupware.les.inf.puc-rio.br/har> (see the section on the Weight Lifting Exercise Dataset).


### Packages and final dataset prepared
```{r packages}
#library list
library(gbm)
library(caret)
library(ggplot2)
library(lattice)
library(rpart)
library(rpart.plot)
library(rattle)
library(randomForest)

# read raw data
setwd("Z:/R/quiz_4")
testing <- read.csv("pml-testing.csv")
training  <- read.csv("pml-training.csv")

classindex <- createDataPartition(training$classe, p=.7, list = FALSE)
Training_Train<-training[classindex,]
Training_Test<-training[-classindex,]
dim(Training_Test)

#summary of data and remove variables with near zero variance and NA values
str(Training_Train)
dim(Training_Train)
dim(Training_Test)
Training_Train_1<-Training_Train[, -nearZeroVar(Training_Train)]
Training_Test_1<-Training_Test[, -nearZeroVar(Training_Train)]
str(Training_Test_1)
dim(Training_Test_1)
dim(Training_Train_1)

NAS <- sapply(Training_Train_1, function(x) mean(is.na(x))) > 0.50
Training_Train_2 <- Training_Train_1[, NAS!=TRUE]
Training_Test_2  <- Training_Test_1[, NAS!=TRUE]
dim(Training_Test_2)
dim(Training_Train_2)

#Final dataset created

Train_Final <- subset(Training_Train_2, select=-c(1, user_name, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
Test_Final  <- subset(Training_Test_2, select=-c(1, user_name, raw_timestamp_part_1, raw_timestamp_part_2, cvtd_timestamp))
dim(Train_Final)

```

## Modelling Analysis including Random Forest, Decision Tree and Boosting 
```{r modelling}
#correlation coef
cor(Train_Final[-54])

#Decistion Tree

set.seed(23456)
model_Fit_DT <- train(classe ~ ., data=Train_Final, method="rpart")
fancyRpartPlot(model_Fit_DT$finalModel)

predict_DT<- predict(model_Fit_DT, Test_Final)
confusionMatrix(predict_DT, Test_Final$classe)

#Accuray for decisiont tree
confusionMatrix(predict_DT, Test_Final$classe)$overall[[1]]

# Random Forest
set.seed(23456)
model_RF <- train(classe ~ ., data=Train_Final, method="rf",
                          trControl=trainControl(method="cv", number=3, verboseIter=FALSE))
plot(model_RF, main = "Optimal number of Predictors")
model_RF$finalModel

# The final value used for the model was mtry = 27.

predict_RF<- predict(model_RF, Test_Final)
confusionMatrix(predict_RF, Test_Final$classe)
#Accuray for random Forest
confusionMatrix(predict_RF, Test_Final$classe)$overall[[1]]
varImp(model_RF)

#Generalized Boosted Model

set.seed(23456)
controlGBM <- trainControl(method = "repeatedcv", number = 4, repeats = 2)
model_GBM  <- train(classe ~ ., data=Train_Final, method = "gbm",
                    trControl = controlGBM, verbose = FALSE)
model_GBM$finalModel
plot(model_GBM)

predict_GBM<- predict(model_GBM, Test_Final)
confusionMatrix(predict_GBM, Test_Final$classe)
#Accuray for GBM
confusionMatrix(predict_GBM, Test_Final$classe)$overall[[1]]

```

### In conclusion, it could be seen clearly that Random Forest would become better model to predict clasess among the training data by comparing accuray for these three model including decision tree, random forest and boosting. Moreover, the optimal number of variables by using random forest is 27

##Appling Random Forest to the test data for quiz


```{r test_quiz}

predictTEST <- predict(model_RF, testing[,-(1:5)])
predictTEST

```
